import random
import string
import asyncio
import logging
import sys
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramConflictError

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("This bot requires Python 3.8 or higher")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7997267152:AAFkALXJFIVl-MKBCt8sDwu4-Ci6LrNIOD8"

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [7438900969, 5241019139]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
banned_users = set()  # {user_id}
all_users = {}  # {user_id: username}
subscribed_users = {}  # {user_id: {"username": username, "expires": datetime or None}}
support_questions = []
keys = {}  # {key: {"days": int, "used": bool, "user_id": int or None, "expires": datetime or None}}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 500 —Å–ª—É—á–∞–π–Ω—ã—Ö email
def generate_random_emails():
    emails = {}
    for _ in range(250):  # Gmail
        username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
        email = f"{username}@gmail.com"
        emails[email] = "dummy_password"
    for _ in range(250):  # Mail.ru
        username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
        email = f"{username}@mail.ru"
        emails[email] = "dummy_password"
    return emails

senders = generate_random_emails()
receivers = ['sms@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org', 'sticker@telegram.org', 'support@telegram.org']

# –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async def send_email(receiver, sender_email, sender_password, subject, body):
    try:
        if random.random() < 0.05:
            raise Exception("Random failure for realism")
        logger.info(f"Simulated email sent to {receiver} from {sender_email}")
        return True
    except Exception as e:
        logger.error(f"Simulated error sending email to {receiver} from {sender_email}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def reset_updates():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1"
            async with session.get(url) as response:
                if response.status == 200:
                    logger.info("Updates queue cleared")
                else:
                    logger.error(f"Failed to clear updates: {await response.text()}")
    except Exception as e:
        logger.error(f"Error clearing updates: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_subscriptions():
    while True:
        current_time = datetime.now()
        expired_users = []
        for user_id, data in subscribed_users.items():
            if data["expires"] and data["expires"] < current_time:
                expired_users.append(user_id)
        for user_id in expired_users:
            username = subscribed_users[user_id]["username"]
            del subscribed_users[user_id]
            logger.info(f"Subscription for user {user_id} (@{username}) expired")
            try:
                await bot.send_message(user_id, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!")
            except Exception as e:
                logger.error(f"Error notifying user {user_id} about subscription expiration: {e}")
        await asyncio.sleep(60)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–ª—é—á–µ–π
async def clean_expired_keys():
    while True:
        current_time = datetime.now()
        expired_keys = [key for key, data in keys.items() if data["used"] and data["expires"] and data["expires"] < current_time]
        for key in expired_keys:
            del keys[key]
            logger.info(f"Key {key} removed due to expiration")
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands():
    default_commands = [
        BotCommand(command="/start", description="üåü –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"),
        BotCommand(command="/activate", description="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    await bot.set_my_commands(commands=default_commands, scope=BotCommandScopeDefault())
    admin_commands = [
        BotCommand(command="/start", description="üåü –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="/ban", description="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/unban", description="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/answer", description="üì¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
        BotCommand(command="/subscribe", description="üìÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Ä–µ–º—è"),
        BotCommand(command="/unsubscribe", description="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="/generatekey", description="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"),
        BotCommand(command="/listkeys", description="üìú –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
    ]
    for admin_id in ADMIN_IDS:
        await bot.set_my_commands(commands=admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
    logger.info("Bot commands menu set successfully")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ComplaintStates(StatesGroup):
    waiting_for_complaint_type = State()
    username = State()
    tg_id = State()
    chat_link = State()
    violation_link = State()
    channel_link = State()
    channel_violation = State()
    bot_username = State()
    group_link = State()
    group_id = State()
    group_violation = State()

class SupportStates(StatesGroup):
    waiting_for_question = State()

class AdminStates(StatesGroup):
    waiting_for_subscription_id = State()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
def generate_key(length=16):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))

# –ö–æ–º–∞–Ω–¥–∞ /generatekey
@router.message(Command("generatekey"))
async def generate_key_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        days = int(message.text.split()[1])
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        key = generate_key()
        keys[key] = {
            "days": days,
            "used": False,
            "user_id": None,
            "expires": None
        }
        await message.answer(f"‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: `{key}`\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /generatekey <days>")

# –ö–æ–º–∞–Ω–¥–∞ /activate
@router.message(Command("activate"))
async def activate_key_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    
    if user_id in banned_users:
        await message.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    try:
        key = message.text.split()[1]
        if key not in keys:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á.")
            return
        if keys[key]["used"]:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
        days = keys[key]["days"]
        expires = datetime.now() + timedelta(days=days)
        keys[key]["used"] = True
        keys[key]["user_id"] = user_id
        keys[key]["expires"] = expires
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscribed_users[user_id] = {
            "username": username,
            "expires": expires
        }
        
        await message.answer(f"‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}.")
        logger.info(f"User {user_id} (@{username}) activated key {key} for {days} days")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á `{key}` –Ω–∞ {days} –¥–Ω–µ–π.")
            except Exception as e:
                logger.error(f"Error notifying admin {admin_id} about key activation: {e}")
            
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: /activate <key>")

# –ö–æ–º–∞–Ω–¥–∞ /listkeys
@router.message(Command("listkeys"))
async def list_keys_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not keys:
        await message.answer("üì≠ –ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    key_list = "\n".join(
        f"üîë `{key}`: {data['days']} –¥–Ω–µ–π, "
        f"{'‚úÖ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if data['used'] else '‚è≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}, "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id'] or '–Ω–µ—Ç'}, "
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {data['expires'].strftime('%Y-%m-%d %H:%M') if data['expires'] else '–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}"
        for key, data in keys.items()
    )
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n{key_list}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    all_users[user_id] = username  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.debug(f"Entering start_command for user {user_id} (@{username}), command text: '{message.text}'")
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
            [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
        ])
        logger.debug(f"Sending start message with keyboard to user {user_id}")
        await message.answer(
            "üåü **SN0S3R - –ñ–∞–ª–æ–±–Ω—ã–π –£–±–∏–π—Ü–∞** üåü\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üöÄ",
            reply_markup=keyboard
        )
        logger.info(f"Successfully sent /start response to user {user_id} (@{username})")
    except Exception as e:
        logger.error(f"Error in /start for user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /getid
@router.message(Command("getid"))
async def get_id_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    if message.from_user.id in ADMIN_IDS:
        try:
            target_username = message.text.split()[1].lstrip("@")
            for uid, uname in all_users.items():
                if uname.lower() == target_username.lower():
                    await message.answer(f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname}: {uid}")
                    return
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except IndexError:
            await message.answer(f"üÜî –í–∞—à ID: {user_id}\n–î–ª—è –ø–æ–∏—Å–∫–∞ ID: /getid @username")
    else:
        await message.answer(f"üÜî –í–∞—à ID: {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.add(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∑–∞–±–∞–Ω–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /ban @username")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.discard(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /unban @username")

# –ö–æ–º–∞–Ω–¥–∞ /users
@router.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not all_users:
        await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    user_list = "\n".join(
        f"ID: {user_id}, @{username}" + 
        (f" ‚úÖ (–¥–æ {subscribed_users[user_id]['expires'].strftime('%Y-%m-%d %H:%M')})" if user_id in subscribed_users and subscribed_users[user_id]["expires"] else " ‚úÖ" if user_id in subscribed_users else "") +
        (" üö´" if user_id in banned_users else "")
        for user_id, username in sorted(all_users.items(), key=lambda x: x[0])
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="issue_subscription")]
    ])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
@router.message(Command("subscribe"))
async def subscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")
            return
        username = parts[1].lstrip("@")
        days = int(parts[2])
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        expires = datetime.now() + timedelta(days=days)
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": expires
        }
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id}) –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}.")
        try:
            await bot.send_message(user_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}!")
        except Exception as e:
            logger.error(f"Error notifying user {user_id} about subscription: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
@router.message(Command("unsubscribe"))
async def unsubscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if user_id not in subscribed_users:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        del subscribed_users[user_id]
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id}) —É–¥–∞–ª–µ–Ω–∞.")
        try:
            await bot.send_message(user_id, "üóë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Error notifying user {user_id} about subscription removal: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /unsubscribe @username")

# –ö–æ–º–∞–Ω–¥–∞ /answer
@router.message(Command("answer"))
async def answer_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not support_questions:
        await message.answer("üì≠ –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for idx, q in enumerate(support_questions, 1):
        await message.answer(
            f"‚ùì –í–æ–ø—Ä–æ—Å #{idx} –æ—Ç @{q['username']} (ID: {q['user_id']}):\n{q['text']}"
        )
    await message.answer("üì¨ –û—Ç–≤–µ—Ç—å—Ç–µ, —Ü–∏—Ç–∏—Ä—É—è –≤–æ–ø—Ä–æ—Å (—Å–≤–∞–π–ø), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
@router.callback_query(lambda c: c.data == "issue_subscription")
async def process_issue_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.set_state(AdminStates.waiting_for_subscription_id)
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
    await callback.message.delete()

# –í–≤–æ–¥ username –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
@router.message(AdminStates.waiting_for_subscription_id)
async def process_subscription_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        username = message.text.lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": None
        }
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id}) –≤—ã–¥–∞–Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        try:
            await bot.send_message(user_id, "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.callback_query(lambda c: c.data.startswith("choice_"))
async def process_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
       (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    choice = callback.data
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    if choice == "choice_snos":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî™ –í–∑—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="snos_1")],
            [InlineKeyboardButton(text="üì¢ –í–∑—è—Ç—å –∫–∞–Ω–∞–ª", callback_data="snos_2")],
            [InlineKeyboardButton(text="ü§ñ –ó–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞", callback_data="snos_3")],
            [InlineKeyboardButton(text="üí• –ó–∞—Ö—É—è—Ä—Ç—å –∫–∞–Ω–∞–ª", callback_data="snos_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Å–Ω–æ—Å–∞:", reply_markup=keyboard)
    elif choice == "choice_support":
        await state.set_state(SupportStates.waiting_for_question)
        await callback.message.edit_text(
            "üì© –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!",
            reply_markup=main_keyboard
        )
    elif choice == "choice_back":
        await callback.message.edit_text(
            "üåü **SN0S3R - –ñ–∞–ª–æ–±–Ω—ã–π –£–±–∏–π—Ü–∞** üåü\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üöÄ",
            reply_markup=main_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(SupportStates.waiting_for_question)
async def process_support_question(message: Message, state: FSMContext):
    question = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    support_questions.append({"user_id": user_id, "username": username, "text": question})
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n{question}"
            )
        await message.answer(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. üòä",
            reply_markup=main_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∞–º: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòî",
            reply_markup=main_keyboard
        )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
@router.message(lambda message: message.from_user.id in ADMIN_IDS and message.reply_to_message)
async def process_admin_reply(message: Message):
    reply_text = message.text
    replied_message = message.reply_to_message.text
    for question in support_questions:
        question_text = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{question['username']} (ID: {question['user_id']}):\n{question['text']}"
        if question_text in replied_message:
            user_id = question['user_id']
            try:
                await bot.send_message(
                    user_id,
                    f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}"
                )
                await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
                support_questions.remove(question)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
            return
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ü–∏—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–Ω–æ—Å–∞
@router.callback_query(lambda c: c.data.startswith("snos_"))
async def process_snos_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
       (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    choice = callback.data.split("_")[1]
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await state.update_data(choice=choice)
    await state.set_state(ComplaintStates.waiting_for_complaint_type)
    if choice == "1":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –ó–∞ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º—É", callback_data="comp_1")],
            [InlineKeyboardButton(text="üîç –ó–∞ –¥–æ–∫—Å–∏–Ω–≥", callback_data="comp_2")],
            [InlineKeyboardButton(text="üòà –ó–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥/–æ—Å–∫", callback_data="comp_3")],
            [InlineKeyboardButton(text="üíâ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—Ä–∫–æ—Ç—ã", callback_data="comp_4")],
            [InlineKeyboardButton(text="üë§ –ö—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –≤ –Ω–∞—Ä–∫–æ—à–æ–ø–µ", callback_data="comp_5")],
            [InlineKeyboardButton(text="üö® –ü—Ä–æ–¥–∞–∂–∞ –¶–ü", callback_data="comp_6")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=keyboard)
    elif choice == "2":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –° –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", callback_data="ch_1")],
            [InlineKeyboardButton(text="üê∂ –° –∂–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ–º", callback_data="ch_2")],
            [InlineKeyboardButton(text="üö® –° –¥–µ—Ç—Å–∫–∏–º –ø–æ—Ä–Ω–æ", callback_data="ch_3")],
            [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å—ã (–¥–æ–∫—Å/—Å–≤–∞—Ç)", callback_data="ch_4")],
            [InlineKeyboardButton(text="ü©∏ –° —Ä–∞—Å—á–ª–µ–Ω–µ–Ω–∫–æ–π", callback_data="ch_5")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
    elif choice == "3":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ì–ª–∞–∑ –ë–æ–≥–∞", callback_data="bot_1")],
            [InlineKeyboardButton(text="üê≥ –°–∏–Ω–µ–≥–æ –∫–∏—Ç–∞", callback_data="bot_2")],
            [InlineKeyboardButton(text="üö® –ü—Ä–æ–¥–∞–∂–∞ –¶–ü", callback_data="bot_3")],
            [InlineKeyboardButton(text="üí∏ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã", callback_data="bot_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –±–æ—Ç–∞:", reply_markup=keyboard)
    elif choice == "4":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí• –ü—Ä–æ—Å—Ç–æ —Å–Ω–æ—Å", callback_data="group_1")],
            [InlineKeyboardButton(text="üì© –°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞", callback_data="group_2")],
            [InlineKeyboardButton(text="üñº –ó–∞ –∞–≤—É/–Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="group_3")],
            [InlineKeyboardButton(text="‚öî –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Å–∏–ª–∏—è", callback_data="group_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
@router.callback_query(lambda c: c.data.startswith(("comp_", "ch_", "bot_", "group_")))
async def process_complaint_type(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
       (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    complaint_type = callback.data.split("_")[0]
    complaint_id = callback.data.split("_")[1]
    await state.update_data(complaint_type=complaint_type, complaint_id=complaint_id)
    data = await state.get_data()
    choice = data.get("choice")
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    if choice == "1":
        await state.set_state(ComplaintStates.username)
        await callback.message.edit_text("üë§ –í–≤–µ–¥–∏ USERNAME –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "2":
        await state.set_state(ComplaintStates.channel_link)
        await callback.message.edit_text("üì¢ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=main_keyboard)
    elif choice == "3":
        await state.set_state(ComplaintStates.bot_username)
        await callback.message.edit_text("ü§ñ –í–≤–µ–¥–∏ USERNAME –±–æ—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "4":
        await state.set_state(ComplaintStates.group_link)
        await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ USERNAME –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.username)
async def process_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(username=message.text)
    await state.set_state(ComplaintStates.tg_id)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await message.answer("üÜî –í–≤–µ–¥–∏ TG ID –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TG ID –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.tg_id)
async def process_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(tg_id=message.text)
    await state.set_state(ComplaintStates.chat_link)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await message.answer("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.chat_link)
async def process_chat_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(chat_link=message.text)
    await state.set_state(ComplaintStates.violation_link)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.violation_link)
async def process_violation_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(violation_link=message.text)
    data = await state.get_data()
    username = data.get("username")
    tg_id = data.get("tg_id")
    chat_link = data.get("chat_link")
    violation_link = data.get("violation_link")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ç—Ä–æ–ª–ª–∏—Ç –∏ –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "4": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –ø—Ä–æ–¥–∞–µ—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –°—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "5": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –∫—É—Ä–∞—Ç–æ—Ä –Ω–∞—Ä–∫–æ—à–æ–ø–∞! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "6": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(
                username=username.strip(),
                tg_id=tg_id.strip(),
                chat_link=chat_link.strip(),
                violation_link=violation_link.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.message(ComplaintStates.channel_link)
async def process_channel_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_link=message.text)
    await state.set_state(ComplaintStates.channel_violation)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
@router.message(ComplaintStates.channel_violation)
async def process_channel_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_violation=message.text)
    data = await state.get_data()
    channel_link = data.get("channel_link")
    channel_violation = data.get("channel_violation")
    ch_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–∞–Ω–∞–ª {channel_link} –ø—É–±–ª–∏–∫—É–µ—Ç –∂–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –°—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "4": f"–ö–∞–Ω–∞–ª {channel_link} –ø—Ä–æ–¥–∞–µ—Ç –¥–æ–∫—Å–∏–Ω–≥/—Å–≤–∞—Ç! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "5": f"–ö–∞–Ω–∞–ª {channel_link} –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–∞—Å—á–ª–µ–Ω–µ–Ω–∫—É! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(ch_id, comp_texts["1"])
            comp_body = comp_text.format(channel_link=channel_link.strip(), channel_violation=channel_violation.strip())
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–∞–Ω–∞–ª', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ USERNAME –±–æ—Ç–∞
@router.message(ComplaintStates.bot_username)
async def process_bot_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    bot_user = message.text
    data = await state.get_data()
    bot_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–æ—Ç {bot_user} –∏—â–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –±–æ—Ç {bot_user} –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ —Å—É–∏—Ü–∏–¥—É! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ë–æ—Ç {bot_user} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ü—Ä–æ—à—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "4": f"–ë–æ—Ç {bot_user} –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(bot_id, comp_texts["1"])
            comp_body = comp_text.format(bot_user=bot_user.strip())
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
@router.message(ComplaintStates.group_link)
async def process_group_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_link=message.text)
    await state.set_state(ComplaintStates.group_id)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await message.answer("üÜî –í–≤–µ–¥–∏ TG ID —á–∞—Ç–∞:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TG ID –≥—Ä—É–ø–ø—ã
@router.message(ComplaintStates.group_id)
async def process_group_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_id=message.text)
    data = await state.get_data()
    group_choice = data.get("complaint_id")
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    if group_choice == "4":
        await state.set_state(ComplaintStates.group_violation)
        await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:", reply_markup=main_keyboard)
    else:
        await send_group_complaint(message, state)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
@router.message(ComplaintStates.group_violation)
async def process_group_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_violation=message.text)
    await send_group_complaint(message, state)
    await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –≥—Ä—É–ø–ø—É
async def send_group_complaint(message: Message, state: FSMContext):
    data = await state.get_data()
    user_chat = data.get("group_link")
    id_chat = data.get("group_id")
    ssilka = data.get("group_violation")
    group_choice = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì—Ä—É–ø–ø–∞ {user_chat} (ID: {id_chat}) –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≥—Ä—É–ø–ø–∞ {user_chat} (ID: {id_chat}) —Å–ø–∞–º–∏—Ç! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ì—Ä—É–ø–ø–∞ {user_chat} (ID: {id_chat}) –∏–º–µ–µ—Ç –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "4": f"–ì—Ä—É–ø–ø–∞ {user_chat} (ID: {id_chat}) –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç –Ω–∞—Å–∏–ª–∏–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {ssilka}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(group_choice, comp_texts["1"])
            comp_body = comp_text.format(user_chat=user_chat.strip(), id_chat=id_chat.strip(), ssilka=ssilka.strip() if ssilka else "")
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –≥—Ä—É–ø–ø—É', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.message()
async def check_ban_and_subscription(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    all_users[user_id] = username
    logger.info(f"Checking ban/subscription for user {user_id} (@{username}), command: {message.text}")
    if user_id in banned_users:
        logger.info(f"User {user_id} is banned")
        await message.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return False
    current_state = await state.get_state()
    if user_id in ADMIN_IDS or current_state == SupportStates.waiting_for_question.state or \
       (message.text and message.text.lower() in ["/start", "/activate"]):
        logger.info(f"Allowing user {user_id} (admin, support, /start, or /activate)")
        return True
    if user_id not in subscribed_users:
        logger.info(f"User {user_id} has no subscription")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate <key> –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return False
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot polling")
    max_retries = 5
    retry_delay = 15
    attempt = 0
    await reset_updates()
    await set_bot_commands()
    asyncio.create_task(check_subscriptions())
    asyncio.create_task(clean_expired_keys())
    while attempt < max_retries:
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook cleared, starting polling")
            await dp.start_polling(bot, handle_signals=True)
            break
        except TelegramConflictError as e:
            attempt += 1
            logger.error(f"Conflict error (attempt {attempt}/{max_retries}): {e}. Retrying in {retry_delay:.2f} seconds...")
            await asyncio.sleep(retry_delay)
            retry_delay *= 1.5
            await reset_updates()
        except Exception as e:
            logger.error(f"Unexpected error in polling: {e}")
            break
    else:
        logger.error(f"Failed to start bot after {max_retries} attempts. Please create a new token or check for other bot instances.")

if __name__ == "__main__":
    asyncio.run(main())
