import random
import string
import asyncio
import logging
import sys
import aiohttp
import certifi
import ssl
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand, \
    BotCommandScopeDefault, BotCommandScopeChat
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramConflictError
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, FloodWaitError, PhoneCodeInvalidError
from telethon.tl.functions.messages import GetHistoryRequest, DeleteHistoryRequest
import time
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.tl.types import KeyboardButtonUrl, KeyboardButtonCallback

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("This bot requires Python 3.8 or higher")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler("bot.log", encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setLevel(logging.DEBUG)
stream_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
BOT_TOKEN = "8177021318:AAEusRPXgP6URYs8MCpSQ3--6dw1_Cf86N0"
ADMIN_IDS = {5241019139, 7438900969}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è telethon
API_ID = "27683579"
API_HASH = "a1d0fc7d0c9a41ff5e0ae6a6ed8e2dbb"
PHONE_NUMBER = "+79131500404"
SESSION_STRING = "1ApWapzMBu6o7KbVYr0NFMa4oWpQd4o83V6Yt0zfvx2Q95EpLbVmZYF9BBqHyOTc-pWVqHblX8hCJ6kPxRZ2-KNOpkbmIjFqPJt-W0efl2jNLTq7OhHC3cJGOqCvST68KuCRAePf9fUdPMRnoqRLLavBiSRIldnLUvQciiWBSp3HIAXbEJSuPpq3ugDRyFLvwG8svvz9bDs0EK0Ykw3z_H9UtrwPPgXVj8FoFF7_jomQxGhz0J5UiR1uW0m2rKj3YRfe8zSw50STPFNteITYysb5s2rj5I1GD1U_aNsHS0mMb8QWkCVAaRJWTpRnZkXq1Cf21xVmVAX_8EBVqB1m5FCR9AzbnqQM="
TARGET_BOT = 'bini228777_bot'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ telethon —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
banned_users = set()
all_users = {}
subscribed_users = {}
support_questions = []
keys = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
senders = {}
for _ in range(250):  # Gmail
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
    senders[f"{username}@gmail.com"] = "dummy_password"
for _ in range(250):  # Mail.ru
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
    senders[f"{username}@mail.ru"] = "dummy_password"
receivers = ['sms@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org', 'sticker@telegram.org',
             'support@telegram.org']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
ssl_context = ssl.create_default_context(cafile=certifi.where())

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å @hunterscambot
async def wait_for_specific_response(client, bot_username, keyword, timeout=10):
    logger.info(f"Waiting for message containing: {keyword.replace('üîç', '[magnifying glass]')}")
    start_time = time.time()
    while time.time() - start_time < timeout:
        history = await client(GetHistoryRequest(
            peer=bot_username,
            limit=1,
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        if history.messages:
            last_msg = history.messages[0].message
            if keyword in last_msg:
                logger.info("Received expected message")
                return True
        await asyncio.sleep(1)
    logger.warning("Timeout: expected message not received")
    return False

async def get_n_latest_bot_messages(client, bot_username, count=2):
    history = await client(GetHistoryRequest(
        peer=bot_username,
        limit=count + 1,
        offset_date=None,
        offset_id=0,
        max_id=0,
        min_id=0,
        add_offset=0,
        hash=0
    ))
    return history.messages

# –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async def send_email(receiver, sender_email, sender_password, subject, body):
    try:
        if random.random() < 0.05:
            raise Exception("Random failure for realism")
        logger.info(f"Simulated email sent to {receiver} from {sender_email}")
        return True
    except Exception as e:
        logger.error(f"Simulated error sending email to {receiver} from {sender_email}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def reset_updates():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1"
            async with session.get(url, ssl=ssl_context) as response:
                if response.status == 200:
                    logger.info("Updates queue cleared")
                else:
                    logger.error(f"Failed to clear updates: {await response.text()}")
    except Exception as e:
        logger.error(f"Error clearing updates: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_subscriptions():
    while True:
        current_time = datetime.now()
        expired_users = []
        for user_id, data in subscribed_users.items():
            if data["expires"] and data["expires"] < current_time:
                expired_users.append(user_id)
        for user_id in expired_users:
            username = subscribed_users[user_id]["username"]
            del subscribed_users[user_id]
            logger.info(f"Subscription for user {user_id} (@{username}) expired")
            try:
                await bot.send_message(user_id, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!")
            except Exception as e:
                logger.error(f"Error notifying user {user_id} about subscription expiration: {e}")
        await asyncio.sleep(60)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –∫–ª—é—á–µ–π
async def clean_expired_keys():
    while True:
        current_time = datetime.now()
        expired_keys = [key for key, data in keys.items() if
                        data["used"] and data["expires"] and data["expires"] < current_time]
        for key in expired_keys:
            del keys[key]
            logger.info(f"Key {key} removed due to expiration")
        await asyncio.sleep(3600)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands():
    default_commands = [
        BotCommand(command="/start", description="üåü –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"),
        BotCommand(command="/activate", description="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    admin_commands = [
        BotCommand(command="/start", description="üåü –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="/ban", description="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/unban", description="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="/answer", description="üì¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
        BotCommand(command="/subscribe", description="üìÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Ä–µ–º—è"),
        BotCommand(command="/unsubscribe", description="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="/generatekey", description="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"),
        BotCommand(command="/listkeys", description="üìú –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
    ]
    try:
        await bot.set_my_commands(commands=default_commands, scope=BotCommandScopeDefault())
        logger.info("Default bot commands set successfully")
        for admin_id in ADMIN_IDS:
            try:
                await bot.get_chat(admin_id)
                await bot.set_my_commands(commands=admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
                logger.info(f"Admin bot commands set successfully for admin {admin_id}")
            except Exception as e:
                logger.warning(f"Failed to set admin commands for admin {admin_id}: {e}")
    except Exception as e:
        logger.error(f"Error setting bot commands: {e}")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ComplaintStates(StatesGroup):
    waiting_for_complaint_type = State()
    username = State()
    tg_id = State()
    chat_link = State()
    violation_link = State()
    channel_link = State()
    channel_violation = State()
    bot_username = State()
    group_link = State()
    group_id = State()
    group_violation = State()

class SupportStates(StatesGroup):
    waiting_for_question = State()

class AdminStates(StatesGroup):
    waiting_for_subscription_id = State()

class ScriptStates(StatesGroup):
    waiting_for_script_input = State()
    waiting_for_phone_number = State()
    waiting_for_username = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ username

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
def generate_key(length=16):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_ban_and_subscription(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in banned_users or (user_id not in ADMIN_IDS and user_id not in subscribed_users):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return False
    return True

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
async def run_custom_script(user_id: int, callback: CallbackQuery, state: FSMContext) -> None:
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    try:
        await callback.message.edit_text(
            "–ó–∞–ø—É—Å–∫ –û–∂–∏–¥–∞–π—Ç–µ..."
        )

        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
        hunter_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
        await hunter_client.start()
        logger.info(f"Telethon client started for user {user_id}")

        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        try:
            logger.info(f"Clearing chat history with bini228777_bot for user {user_id}")
            await hunter_client(DeleteHistoryRequest(
                peer='bini228777_bot',
                max_id=0,
                just_clear=True,
                revoke=True
            ))
            logger.info(f"Chat history cleared with bini228777_bot for user {user_id}")
        except Exception as e:
            logger.error(f"Error clearing chat history for user {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        await hunter_client.send_message('bini228777_bot', "start")
        logger.info(f"Sent 'start' to bini228777_bot for user {user_id}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        if await wait_for_specific_response(hunter_client, 'bini228777_bot', "üîç –ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –∑–Ω–∞–µ—Ç–µ",
                                            timeout=15):
            await asyncio.sleep(1)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó –ö–ù–û–ü–û–ö
            await callback.message.edit_text(
                "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º hunter_client –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(hunter_client=hunter_client, callback_message=callback.message)
            await state.set_state(ScriptStates.waiting_for_phone_number)
            logger.info(f"Set state to waiting_for_phone_number for user {user_id}")
            return  # –ñ–¥—ë–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        else:
            await callback.message.edit_text(
                "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç bini228777_bot –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ",
                reply_markup=main_keyboard
            )
            logger.warning(f"Expected message not received from bini228777_bot for user {user_id}")
            if hunter_client.is_connected():
                await hunter_client.disconnect()

    except FloodWaitError as e:
        logger.error(f"Flood wait error for user {user_id}: wait for {e.seconds} seconds")
        await callback.message.edit_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except SessionPasswordNeededError:
        logger.error(f"Two-factor authentication required for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except PhoneCodeInvalidError:
        logger.error(f"Invalid authentication code for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except Exception as e:
        logger.error(f"Error interacting with bini228777_bot for user {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å bini228777_bot: {e}",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    finally:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(ScriptStates.waiting_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    phone_number = message.text.strip()
    logger.info(f"Received phone number {phone_number} from user {user_id} in state waiting_for_phone_number")

    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º hunter_client –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    hunter_client = data.get("hunter_client")
    logger.info(f"Hunter client retrieved from state for user {user_id}: {hunter_client is not None}")

    if not hunter_client:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone_number.startswith("+") or len(phone_number) < 12:
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω
        if not hunter_client.is_connected():
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_keyboard
            )
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–æ—Ç—É
        await hunter_client.send_message('bini228777_bot', phone_number)
        logger.info(f"Sent phone number {phone_number} to bini228777_bot for user {user_id}")

        # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        await message.answer("–ü–æ–∏—Å–∫...")
        await asyncio.sleep(15)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await get_n_latest_bot_messages(hunter_client, 'bini228777_bot', count=2)
        logger.info(f"Received {len(messages) if messages else 0} messages from bini228777_bot for user {user_id}")
        if messages and len(messages) >= 2:
            response = messages[0].message
            await message.answer(
                f"üò∫ –û—Ç—á–µ—Ç:\n{response}",
                reply_markup=main_keyboard
            )
            logger.info(f"Response from bini228777_bot for user {user_id}: {response}")
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id,
                                           f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É {phone_number}")
                except Exception as e:
                    logger.error(f"Error notifying admin {admin_id}: {e}")
        else:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            history = await hunter_client(GetHistoryRequest(
                peer='bini228777_bot',
                limit=5,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))
            if history.messages:
                logger.info(f"Last 5 messages from bini228777_bot: {[msg.message for msg in history.messages]}")
            else:
                logger.info("No messages found in history from bini228777_bot")

            await message.answer(
                "‚ö† bini228777_bot –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_keyboard
            )
            logger.warning(f"No response or not enough messages from bini228777_bot for user {user_id}")
    except Exception as e:
        logger.error(f"Error sending phone number for user {user_id}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}",
            reply_markup=main_keyboard
        )
    finally:
        if hunter_client.is_connected():
            await hunter_client.disconnect()
            logger.info(f"Telethon client disconnected for user {user_id}")
        await state.clear()

async def find_and_click_button(client, bot_username, button_position=3, timeout=15):
    logger.info(f"Searching for button at position {button_position + 1} (index {button_position})")
    start_time = time.time()
    while time.time() - start_time < timeout:
        history = await client(GetHistoryRequest(
            peer=bot_username,
            limit=1,
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        if history.messages:
            message = history.messages[0]
            logger.info(f"Message text: {message.message}")
            if hasattr(message, 'reply_markup') and message.reply_markup:
                logger.info("Found inline buttons:")
                buttons = [button for row in message.reply_markup.rows for button in row.buttons]
                for i, button in enumerate(buttons):
                    logger.info(f"Button {i + 1} (index {i}): '{button.text}' | Type: {type(button).__name__}")
                    if isinstance(button, KeyboardButtonCallback):
                        logger.info(f"Callback data for button {i + 1}: {button.data}")
                if len(buttons) > button_position:
                    target_button = buttons[button_position]
                    logger.info(f"Selected button at position {button_position + 1}: '{target_button.text}'")
                    try:
                        if isinstance(target_button, KeyboardButtonUrl):
                            logger.info(f"This is a URL button: {target_button.url}")
                            return True
                        elif isinstance(target_button, KeyboardButtonCallback):
                            logger.info(f"Sending callback query with data: {target_button.data}")
                            try:
                                await client(GetBotCallbackAnswerRequest(
                                    peer=bot_username,
                                    msg_id=message.id,
                                    data=target_button.data
                                ))
                                logger.info("Callback query successfully sent.")
                            except Exception as e:
                                if "did not answer to the callback query in time" in str(e):
                                    logger.info("Bot did not respond in time, but query sent (timeout).")
                                else:
                                    logger.error(f"Error sending callback query: {e}")
                                    return False
                            return True
                        else:
                            await message.click(button_position)
                            logger.info("Button successfully clicked via click().")
                            return True
                    except Exception as e:
                        logger.error(f"Error clicking button: {e}")
                        return False
                else:
                    logger.info(f"Not enough buttons: found {len(buttons)}, required {button_position + 1}")
        else:
            logger.info("No messages found.")
        await asyncio.sleep(1)
    logger.warning(f"Timeout: button at position {button_position + 1} not found.")
    return False

@router.message(ScriptStates.waiting_for_username)
async def process_username_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.text.strip()
    logger.info(f"Received username {username} from user {user_id} in state waiting_for_username")

    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º hunter_client –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    hunter_client = data.get("hunter_client")
    logger.info(f"Hunter client retrieved from state for user {user_id}: {hunter_client is not None}")

    if not hunter_client:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username
        if not username.startswith("@"):
            await message.answer(
                "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω
        if not hunter_client.is_connected():
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_keyboard
            )
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username –±–æ—Ç—É
        await hunter_client.send_message(TARGET_BOT, username)
        logger.info(f"Sent username {username} to {TARGET_BOT} for user {user_id}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–Ω–æ–ø–∫—É
        if await find_and_click_button(hunter_client, TARGET_BOT, button_position=3, timeout=15):
            await asyncio.sleep(10)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            messages = await get_n_latest_bot_messages(hunter_client, TARGET_BOT, count=2)
            if messages and len(messages) >= 2:
                response = messages[0].message
                await message.answer(
                    f"üò∫ –û—Ç—á–µ—Ç –ø–æ {username}:\n{response}",
                    reply_markup=main_keyboard
                )
                logger.info(f"Response from {TARGET_BOT} for user {user_id}: {response}")
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id,
                                              f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç—á–µ—Ç –ø–æ username {username}")
                    except Exception as e:
                        logger.error(f"Error notifying admin {admin_id}: {e}")
            else:
                await message.answer(
                    f"‚ö† {TARGET_BOT} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=main_keyboard
                )
                logger.warning(f"No response or not enough messages from {TARGET_BOT} for user {user_id}")
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–Ω–æ–ø–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_keyboard
            )
            logger.warning(f"Failed to click the fourth button for user {user_id}")

    except Exception as e:
        logger.error(f"Error processing username for user {user_id}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username: {e}",
            reply_markup=main_keyboard
        )
    finally:
        if hunter_client.is_connected():
            await hunter_client.disconnect()
            logger.info(f"Telethon client disconnected for user {user_id}")
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /generatekey
@router.message(Command("generatekey"))
async def generate_key_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    try:
        days = int(message.text.split()[1])
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        key = generate_key()
        keys[key] = {
            "days": days,
            "used": False,
            "user_id": None,
            "expires": None
        }
        await message.answer(f"‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: `{key}`\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /generatekey <days>")

# –ö–æ–º–∞–Ω–¥–∞ /activate
@router.message(Command("activate"))
async def activate_key_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    if user_id in banned_users:
        await message.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    try:
        key = message.text.split()[1]
        if key not in keys:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á.")
            return
        if keys[key]["used"]:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return
        days = keys[key]["days"]
        expires = datetime.now() + timedelta(days=days)
        keys[key]["used"] = True
        keys[key]["user_id"] = user_id
        keys[key]["expires"] = expires
        subscribed_users[user_id] = {
            "username": username,
            "expires": expires
        }
        await message.answer(f"‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}.")
        logger.info(f"User {user_id} (@{username}) activated key {key} for {days} days")
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id,
                                       f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á `{key}` –Ω–∞ {days} –¥–Ω–µ–π.")
            except Exception as e:
                logger.error(f"Error notifying admin {admin_id} about key activation: {e}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: /activate <key>")

# –ö–æ–º–∞–Ω–¥–∞ /listkeys
@router.message(Command("listkeys"))
async def list_keys_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    if not keys:
        await message.answer("üì≠ –ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    key_list = "\n".join(
        f"üîë `{key}`: {data['days']} –¥–Ω–µ–π, "
        f"{'‚úÖ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if data['used'] else '‚è≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}, "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id'] or '–Ω–µ—Ç'}, "
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {data['expires'].strftime('%Y-%m-%d %H:%M') if data['expires'] else '–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}"
        for key, data in keys.items()
    )
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n{key_list}")

@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    all_users[user_id] = username
    logger.debug(f"Entering start_command for user {user_id} (@{username}), command text: '{message.text}'")
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
            [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
            [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
            [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ])
        logger.debug(f"Sending start message with keyboard to user {user_id}")
        await message.answer(
            "üåü SN0S3R - –ñ–∞–ª–æ–±–Ω—ã–π –£–±–∏–π—Ü–∞ üåü\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç! üöÄ",
            reply_markup=keyboard
        )
        logger.info(f"Successfully sent /start response to user {user_id} (@{username})")
    except Exception as e:
        logger.error(f"Error in /start for user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /getid
@router.message(Command("getid"))
async def get_id_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    if message.from_user.id in ADMIN_IDS:
        try:
            target_username = message.text.split()[1].lstrip("@")
            for uid, uname in all_users.items():
                if uname.lower() == target_username.lower():
                    await message.answer(f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname}: {uid}")
                    return
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except IndexError:
            await message.answer(f"üÜî –í–∞—à ID: {user_id}\n–î–ª—è –ø–æ–∏—Å–∫–∞ ID: /getid @username")
    else:
        await message.answer(f"üÜî –í–∞—à ID: {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.add(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∑–∞–±–∞–Ω–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /ban @username")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.discard(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /unban @username")

# –ö–æ–º–∞–Ω–¥–∞ /users
@router.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    if not all_users:
        await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    user_list = "\n".join(
        f"ID: {user_id}, @{username}" +
        (f" ‚úÖ (–¥–æ {subscribed_users[user_id]['expires'].strftime('%Y-%m-%d %H:%M')})" if user_id in subscribed_users and
                                                                                         subscribed_users[user_id][
                                                                                             "expires"] else " ‚úÖ" if user_id in subscribed_users else "") +
        (" üö´" if user_id in banned_users else "")
        for user_id, username in sorted(all_users.items(), key=lambda x: x[0])
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="issue_subscription")]
    ])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
@router.message(Command("subscribe"))
async def subscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")
            return
        username = parts[1].lstrip("@")
        days = int(parts[2])
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        expires = datetime.now() + timedelta(days=days)
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": expires
        }
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id}) –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}.")
        try:
            await bot.send_message(user_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {expires.strftime('%Y-%m-%d %H:%M')}!")
        except Exception as e:
            logger.error(f"Error notifying user {user_id} about subscription: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
@router.message(Command("unsubscribe"))
async def unsubscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if user_id not in subscribed_users:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        del subscribed_users[user_id]
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id}) —É–¥–∞–ª–µ–Ω–∞.")
        try:
            await bot.send_message(user_id, "üóë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Error notifying user {user_id} about subscription removal: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username: /unsubscribe @username")

# –ö–æ–º–∞–Ω–¥–∞ /answer
@router.message(Command("answer"))
async def answer_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    if not support_questions:
        await message.answer("üì≠ –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for idx, q in enumerate(support_questions, 1):
        await message.answer(
            f"‚ùì –í–æ–ø—Ä–æ—Å #{idx} –æ—Ç @{q['username']} (ID: {q['user_id']}):\n{q['text']}"
        )
    await message.answer("üì¨ –û—Ç–≤–µ—Ç—å—Ç–µ, —Ü–∏—Ç–∏—Ä—É—è –≤–æ–ø—Ä–æ—Å (—Å–≤–∞–π–ø), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "issue_subscription")
async def process_issue_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.set_state(AdminStates.waiting_for_subscription_id)
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
    await callback.message.delete()

# –í–≤–æ–¥ username –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@router.message(AdminStates.waiting_for_subscription_id)
async def process_subscription_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        username = message.text.lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": None
        }
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id}) –≤—ã–¥–∞–Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        try:
            await bot.send_message(user_id, "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("choice_"))
async def process_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    choice = callback.data
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    if choice == "choice_snos":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî™ –í–∑—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="snos_1")],
            [InlineKeyboardButton(text="üì¢ –í–∑—è—Ç—å –∫–∞–Ω–∞–ª", callback_data="snos_2")],
            [InlineKeyboardButton(text="ü§ñ –ó–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞", callback_data="snos_3")],
            [InlineKeyboardButton(text="üí• –ó–∞—Ö—É—è—Ä—Ç—å –∫–∞–Ω–∞–ª", callback_data="snos_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Å–Ω–æ—Å–∞:", reply_markup=keyboard)
    elif choice == "choice_support":
        await state.set_state(SupportStates.waiting_for_question)
        await callback.message.edit_text(
            "üì© –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!",
            reply_markup=main_keyboard
        )
    elif choice == "choice_script":
        await run_custom_script(callback.from_user.id, callback, state)
    elif choice == "choice_username":
        await run_username_script(callback.from_user.id, callback, state)  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    elif choice == "choice_back":
        await callback.message.edit_text(
            "üåü **SN0S3R - –ñ–∞–ª–æ–±–Ω—ã–π –£–±–∏–π—Ü–∞** üåü\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç! üöÄ",
            reply_markup=main_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(SupportStates.waiting_for_question)
async def process_support_question(message: Message, state: FSMContext):
    question = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    support_questions.append({"user_id": user_id, "username": username, "text": question})
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n{question}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. üòä",
        reply_markup=main_keyboard
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(lambda message: message.from_user.id in ADMIN_IDS and message.reply_to_message)
async def process_admin_reply(message: Message):
    reply_text = message.text
    replied_message = message.reply_to_message.text
    for question in support_questions:
        question_text = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{question['username']} (ID: {question['user_id']}):\n{question['text']}"
        if question_text in replied_message:
            user_id = question['user_id']
            try:
                await bot.send_message(
                    user_id,
                    f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}"
                )
                await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
                support_questions.remove(question)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
            return
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ü–∏—Ç–∏—Ä—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
@router.message(ScriptStates.waiting_for_script_input)
async def process_script_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    user_input = message.text
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])

    def console_code_callback():
        return input("Please enter the code you received: ")

    def console_password_callback():
        return input("Please enter your two-factor authentication password: ")

    try:
        await client.start(
            phone=PHONE_NUMBER,
            code_callback=console_code_callback,
            password=console_password_callback
        )
        logger.info(f"Telethon client started for user {user_id}")
        await client.send_message(TARGET_BOT, user_input)
        logger.info(f"Message sent to {TARGET_BOT} by user {user_id}: {user_input}")
        async for response in client.iter_messages(TARGET_BOT, limit=1, wait_time=10):
            response_text = response.text
            break
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞."
        await message.answer(
            f"üì¨ **–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ {TARGET_BOT}:**\n{response_text}",
            reply_markup=main_keyboard
        )
        logger.info(f"Response from {TARGET_BOT} sent to user {user_id}: {response_text}")
    except PhoneCodeInvalidError:
        logger.error(f"Invalid authentication code for user {user_id}")
        await message.answer(
            "‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
    except FloodWaitError as e:
        logger.error(f"Flood wait error for user {user_id}: wait for {e.seconds} seconds")
        await message.answer(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
    except SessionPasswordNeededError:
        logger.error(f"Two-factor authentication required for user {user_id}")
        await message.answer(
            "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –∫–æ–Ω—Å–æ–ª–∏.",
            reply_markup=main_keyboard
        )
    except Exception as e:
        logger.error(f"Error processing script input for user {user_id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
    finally:
        await client.disconnect()
        logger.info(f"Telethon client disconnected for user {user_id}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–Ω–æ—Å–∞
@router.callback_query(lambda c: c.data.startswith("snos_"))
async def process_snos_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    choice = callback.data.split("_")[1]
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await state.update_data(choice=choice)
    await state.set_state(ComplaintStates.waiting_for_complaint_type)
    if choice == "1":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –ó–∞ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º—É", callback_data="comp_1")],
            [InlineKeyboardButton(text="üîç –ó–∞ –¥–æ–∫—Å–∏–Ω–≥", callback_data="comp_2")],
            [InlineKeyboardButton(text="üòà –ó–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥/–æ—Å–∫", callback_data="comp_3")],
            [InlineKeyboardButton(text="üíâ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—Ä–∫–æ—Ç—ã", callback_data="comp_4")],
            [InlineKeyboardButton(text="üë§ –ö—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –≤ –Ω–∞—Ä–∫–æ—à–æ–ø–µ", callback_data="comp_5")],
            [InlineKeyboardButton(text="üö® –ü—Ä–æ–¥–∞–∂–∞ –¶–ü", callback_data="comp_6")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=keyboard)
    elif choice == "2":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –° –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", callback_data="ch_1")],
            [InlineKeyboardButton(text="üê∂ –° –∂–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ–º", callback_data="ch_2")],
            [InlineKeyboardButton(text="üö® –° –¥–µ—Ç—Å–∫–∏–º –ø–æ—Ä–Ω–æ", callback_data="ch_3")],
            [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å—ã (–¥–æ–∫—Å/—Å–≤–∞—Ç)", callback_data="ch_4")],
            [InlineKeyboardButton(text="ü©∏ –° —Ä–∞—Å—á–ª–µ–Ω–µ–Ω–∫–æ–π", callback_data="ch_5")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
    elif choice == "3":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ì–ª–∞–∑ –ë–æ–≥–∞", callback_data="bot_1")],
            [InlineKeyboardButton(text="üê≥ –°–∏–Ω–µ–≥–æ –∫–∏—Ç–∞", callback_data="bot_2")],
            [InlineKeyboardButton(text="üö® –ü—Ä–æ–¥–∞–∂–∞ –¶–ü", callback_data="bot_3")],
            [InlineKeyboardButton(text="üí∏ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã", callback_data="bot_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –±–æ—Ç–∞:", reply_markup=keyboard)
    elif choice == "4":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí• –ü—Ä–æ—Å—Ç–æ —Å–Ω–æ—Å", callback_data="group_1")],
            [InlineKeyboardButton(text="üì© –°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞", callback_data="group_2")],
            [InlineKeyboardButton(text="üñº –ó–∞ –∞–≤—É/–Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="group_3")],
            [InlineKeyboardButton(text="‚öî –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Å–∏–ª–∏—è", callback_data="group_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –Ω–∞ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
@router.callback_query(lambda c: c.data.startswith(("comp_", "ch_", "bot_", "group_")))
async def process_complaint_type(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    complaint_type = callback.data.split("_")[0]
    complaint_id = callback.data.split("_")[1]
    await state.update_data(complaint_type=complaint_type, complaint_id=complaint_id)
    data = await state.get_data()
    choice = data.get("choice")
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    if choice == "1":
        await state.set_state(ComplaintStates.username)
        await callback.message.edit_text("üë§ –í–≤–µ–¥–∏ USERNAME –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "2":
        await state.set_state(ComplaintStates.channel_link)
        await callback.message.edit_text("üì¢ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=main_keyboard)
    elif choice == "3":
        await state.set_state(ComplaintStates.bot_username)
        await callback.message.edit_text("ü§ñ –í–≤–µ–¥–∏ USERNAME –±–æ—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "4":
        await state.set_state(ComplaintStates.group_link)
        await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ username –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.username)
async def process_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(username=message.text)
    await state.set_state(ComplaintStates.tg_id)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await message.answer("üÜî –í–≤–µ–¥–∏ TG ID –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TG ID –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.tg_id)
async def process_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(tg_id=message.text)
    await state.set_state(ComplaintStates.chat_link)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await message.answer("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
@router.message(ComplaintStates.chat_link)
async def process_chat_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(chat_link=message.text)
    await state.set_state(ComplaintStates.violation_link)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
@router.message(ComplaintStates.violation_link)
async def process_violation_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(violation_link=message.text)
    data = await state.get_data()
    username = data.get("username")
    tg_id = data.get("tg_id")
    chat_link = data.get("chat_link")
    violation_link = data.get("violation_link")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ç—Ä–æ–ª–ª–∏—Ç –∏ –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "4": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –ø—Ä–æ–¥–∞–µ—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –°—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "5": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –∫—É—Ä–∞—Ç–æ—Ä –Ω–∞—Ä–∫–æ—à–æ–ø–∞! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "6": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(
                username=username.strip(),
                tg_id=tg_id.strip(),
                chat_link=chat_link.strip(),
                violation_link=violation_link.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.message(ComplaintStates.channel_link)
async def process_channel_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_link=message.text)
    await state.set_state(ComplaintStates.channel_violation)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
@router.message(ComplaintStates.channel_violation)
async def process_channel_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_violation=message.text)
    data = await state.get_data()
    channel_link = data.get("channel_link")
    channel_violation = data.get("channel_violation")
    ch_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–∞–Ω–∞–ª {channel_link} –ø—É–±–ª–∏–∫—É–µ—Ç –∂–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –°—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!",
        "4": f"–ö–∞–Ω–∞–ª {channel_link} –ø—Ä–æ–¥–∞–µ—Ç –¥–æ–∫—Å–∏–Ω–≥/—Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "5": f"–ö–∞–Ω–∞–ª {channel_link} –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–∞—Å—á–ª–µ–Ω–µ–Ω–∫—É! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(ch_id, comp_texts["1"])
            comp_body = comp_text.format(channel_link=channel_link.strip(), channel_violation=channel_violation.strip())
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–∞–Ω–∞–ª', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ username –±–æ—Ç–∞
@router.message(ComplaintStates.bot_username)
async def process_bot_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    bot_user = message.text
    data = await state.get_data()
    bot_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–æ—Ç {bot_user} –∏—â–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –±–æ—Ç {bot_user} –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ —Å—É–∏—Ü–∏–¥—É! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ë–æ—Ç {bot_user} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ü—Ä–æ—à—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "4": f"–ë–æ—Ç {bot_user} –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(bot_id, comp_texts["1"])
            comp_body = comp_text.format(bot_user=bot_user.strip())
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
@router.message(ComplaintStates.group_link)
async def process_group_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_link=message.text)
    await state.set_state(ComplaintStates.group_id)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")]
    ])
    await message.answer("üÜî –í–≤–µ–¥–∏ ID –≥—Ä—É–ø–ø—ã:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID –≥—Ä—É–ø–ø—ã
@router.message(ComplaintStates.group_id)
async def process_group_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_id=message.text)
    await state.set_state(ComplaintStates.group_violation)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
@router.message(ComplaintStates.group_violation)
async def process_group_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_violation=message.text)
    data = await state.get_data()
    group_link = data.get("group_link")
    group_id = data.get("group_id")
    group_violation = data.get("group_violation")
    group_id_comp = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0 –∏–∑ 2500\n–õ–æ–≥:\n(–ø—É—Å—Ç–æ)")
    await state.clear()
    comp_texts = {
        "1": f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ Telegram! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "2": f"–£–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≥—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "3": f"–ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑-–∑–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏/–Ω–∞–∑–≤–∞–Ω–∏—è! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}. –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!",
        "4": f"–ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç –Ω–∞—Å–∏–ª–∏–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}. –°—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ!"
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    log_entries = []
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(group_id_comp, comp_texts["1"])
            comp_body = comp_text.format(
                group_link=group_link.strip(),
                group_id=group_id.strip(),
                group_violation=group_violation.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –≥—Ä—É–ø–ø—É', comp_body)
            if success:
                sent_emails += 1
                log_entries.append(f"[‚úÖ] {sender_email} ‚Üí {receiver}")
            else:
                log_entries.append(f"[‚ùå] {sender_email} ‚Üí {receiver}")
            if len(log_entries) > 10:
                log_entries.pop(0)
            log_text = "\n".join(log_entries) if log_entries else "(–ø—É—Å—Ç–æ)"
            await progress_message.edit_text(
                f"üöÄ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å!** üé¨\n\n"
                f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
                f"**–õ–æ–≥**:\n{log_text}"
            )
            await asyncio.sleep(1.5)
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    await progress_message.edit_text(
        f"üèÅ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
        f"**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {sent_emails} –∏–∑ {total_emails}\n"
        f"**–õ–æ–≥**:\n{log_text}",
        reply_markup=main_keyboard
    )

async def run_username_script(user_id: int, callback: CallbackQuery, state: FSMContext) -> None:
    main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–Ω–æ—Å", callback_data="choice_snos")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="choice_script")],
        [InlineKeyboardButton(text="–ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username")]
    ])
    try:
        await callback.message.edit_text(
            "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞... –û–∂–∏–¥–∞–π—Ç–µ..."
        )

        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
        hunter_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
        await hunter_client.start()
        logger.info(f"Telethon client started for user {user_id} for username lookup")

        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        try:
            logger.info(f"Clearing chat history with {TARGET_BOT} for user {user_id}")
            await hunter_client(DeleteHistoryRequest(
                peer=TARGET_BOT,
                max_id=0,
                just_clear=True,
                revoke=True
            ))
            logger.info(f"Chat history cleared with {TARGET_BOT} for user {user_id}")
        except Exception as e:
            logger.error(f"Error clearing chat history for user {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        await hunter_client.send_message(TARGET_BOT, "/start")
        logger.info(f"Sent '/start' to {TARGET_BOT} for user {user_id}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        response_received = await wait_for_specific_response(hunter_client, TARGET_BOT, "üîç –ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –∑–Ω–∞–µ—Ç–µ", timeout=15)
        if response_received:
            await asyncio.sleep(1)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username
            await callback.message.edit_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º hunter_client –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(hunter_client=hunter_client, callback_message=callback.message)
            await state.set_state(ScriptStates.waiting_for_username)
            logger.info(f"Set state to waiting_for_username for user {user_id}")
            return  # –ñ–¥—ë–º –≤–≤–æ–¥–∞ username
        else:
            await callback.message.edit_text(
                f"‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {TARGET_BOT} –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.",
                reply_markup=main_keyboard
            )
            logger.warning(f"Expected message not received from {TARGET_BOT} for user {user_id}")
            if hunter_client.is_connected():
                await hunter_client.disconnect()

    except FloodWaitError as e:
        logger.error(f"Flood wait error for user {user_id}: wait for {e.seconds} seconds")
        await callback.message.edit_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except SessionPasswordNeededError:
        logger.error(f"Two-factor authentication required for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except PhoneCodeInvalidError:
        logger.error(f"Invalid authentication code for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except Exception as e:
        logger.error(f"Error interacting with {TARGET_BOT} for user {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å {TARGET_BOT}: {e}",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        logger.info("Starting bot polling")
        await reset_updates()
        await set_bot_commands()
        await dp.start_polling(bot, skip_updates=True)
        logger.info("Webhook cleared, starting polling")
        tasks = [
            asyncio.create_task(check_subscriptions()),
            asyncio.create_task(clean_expired_keys())
        ]
        await asyncio.gather(*tasks)
    except TelegramConflictError:
        logger.warning("Webhook is set, attempting to delete it")
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
            async with session.get(url, ssl=ssl_context) as response:
                if response.status == 200:
                    logger.info("Webhook deleted, restarting polling")
                    await main()
                else:
                    logger.error(f"Failed to delete webhook: {await response.text()}")
    except Exception as e:
        logger.error(f"Error in main: {e}")
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
