import random
import string
import asyncio
import logging
import sys
import aiohttp
import certifi
import ssl
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramConflictError
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, FloodWaitError, PhoneCodeInvalidError
from telethon.tl.functions.messages import GetHistoryRequest, DeleteHistoryRequest
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.tl.types import KeyboardButtonUrl, KeyboardButtonCallback

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("This bot requires Python 3.8 or higher")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler = logging.FileHandler("bot.log", encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setLevel(logging.DEBUG)
stream_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8177021318:AAEusRPXgP6URYs8MCpSQ3--6dw1_Cf86N0"
ADMIN_IDS = {5241019139, 7438900969}
API_ID = "27683579"
API_HASH = "a1d0fc7d0c9a41ff5e0ae6a6ed8e2dbb"
PHONE_NUMBER = "+79131500404"
SESSION_STRING = "1ApWapzMBu6o7KbVYr0NFMa4oWpQd4o83V6Yt0zfvx2Q95EpLbVmZYF9BBqHyOTc-pWVqHblX8hCJ6kPxRZ2-KNOpkbmIjFqPJt-W0efl2jNLTq7OhHC3cJGOqCvST68KuCRAePf9fUdPMRnoqRLLavBiSRIldnLUvQciiWBSp3HIAXbEJSuPpq3ugDRyFLvwG8svvz9bDs0EK0Ykw3z_H9UtrwPPgXVj8FoFF7_jomQxGhz0J5UiR1uW0m2rKj3YRfe8zSw50STPFNteITYysb5s2rj5I1GD1U_aNsHS0mMb8QWkCVAaRJWTpRnZkXq1Cf21xVmVAX_8EBVqB1m5FCR9AzbnqQM="
TARGET_BOT = 'bini228777_bot'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
banned_users = set()
all_users = {}
subscribed_users = {}
support_questions = []
keys = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
senders = {}
for _ in range(250):  # Gmail
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
    senders[f"{username}@gmail.com"] = "dummy_password"
for _ in range(250):  # Mail.ru
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(8, 12)))
    senders[f"{username}@mail.ru"] = "dummy_password"
receivers = ['sms@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org', 'sticker@telegram.org', 'support@telegram.org']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
ssl_context = ssl.create_default_context(cafile=certifi.where())

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚öîÔ∏è –°–Ω–æ—Å", callback_data="choice_snos"),
        InlineKeyboardButton(text="üìû –ü—Ä–æ–±–∏–≤", callback_data="choice_script")
    ],
    [
        InlineKeyboardButton(text="üë§ –ü—Ä–æ–±–∏–≤ –ø–æ Username", callback_data="choice_username"),
        InlineKeyboardButton(text="üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="choice_support")
    ]
])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def wait_for_specific_response(client, bot_username, keyword, timeout=10):
    logger.info(f"Waiting for message containing: {keyword.replace('üîç', '[magnifying glass]')}")
    start_time = time.time()
    while time.time() - start_time < timeout:
        history = await client(GetHistoryRequest(
            peer=bot_username,
            limit=1,
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        if history.messages and keyword in history.messages[0].message:
            logger.info("Received expected message")
            return True
        await asyncio.sleep(1)
    logger.warning("Timeout: expected message not received")
    return False

async def get_n_latest_bot_messages(client, bot_username, count=2):
    history = await client(GetHistoryRequest(
        peer=bot_username,
        limit=count + 1,
        offset_date=None,
        offset_id=0,
        max_id=0,
        min_id=0,
        add_offset=0,
        hash=0
    ))
    return history.messages

async def send_email(receiver, sender_email, sender_password, subject, body):
    try:
        if random.random() < 0.05:
            raise Exception("Random failure for realism")
        logger.info(f"Simulated email sent to {receiver} from {sender_email}")
        return True
    except Exception as e:
        logger.error(f"Simulated error sending email to {receiver} from {sender_email}: {e}")
        return False

async def reset_updates():
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1"
            async with session.get(url, ssl=ssl_context) as response:
                if response.status == 200:
                    logger.info("Updates queue cleared")
                else:
                    logger.error(f"Failed to clear updates: {await response.text()}")
    except Exception as e:
        logger.error(f"Error clearing updates: {e}")

async def check_subscriptions():
    while True:
        current_time = datetime.now()
        expired_users = []
        for user_id, data in subscribed_users.items():
            if data["expires"] and data["expires"] < current_time:
                expired_users.append(user_id)
        for user_id in expired_users:
            username = subscribed_users[user_id]["username"]
            del subscribed_users[user_id]
            logger.info(f"Subscription for user {user_id} (@{username}) expired")
            try:
                await bot.send_message(user_id, "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! üîÑ")
            except Exception as e:
                logger.error(f"Error notifying user {user_id}: {e}")
        await asyncio.sleep(60)

async def clean_expired_keys():
    while True:
        current_time = datetime.now()
        expired_keys = [key for key, data in keys.items() if
                        data["used"] and data["expires"] and data["expires"] < current_time]
        for key in expired_keys:
            del keys[key]
            logger.info(f"Key {key} removed due to expiration")
        await asyncio.sleep(3600)

async def set_bot_commands():
    default_commands = [
        BotCommand(command="/start", description="üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID"),
        BotCommand(command="/activate", description="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    ]
    admin_commands = [
        BotCommand(command="/start", description="üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/getid", description="üÜî –£–∑–Ω–∞—Ç—å ID"),
        BotCommand(command="/users", description="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="/ban", description="üö´ –ó–∞–±–∞–Ω–∏—Ç—å"),
        BotCommand(command="/unban", description="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å"),
        BotCommand(command="/answer", description="üì¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"),
        BotCommand(command="/subscribe", description="üìÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="/unsubscribe", description="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="/generatekey", description="üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"),
        BotCommand(command="/listkeys", description="üìú –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
    ]
    try:
        await bot.set_my_commands(commands=default_commands, scope=BotCommandScopeDefault())
        logger.info("Default bot commands set successfully")
        for admin_id in ADMIN_IDS:
            try:
                await bot.get_chat(admin_id)
                await bot.set_my_commands(commands=admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
                logger.info(f"Admin bot commands set for {admin_id}")
            except Exception as e:
                logger.warning(f"Failed to set admin commands for {admin_id}: {e}")
    except Exception as e:
        logger.error(f"Error setting bot commands: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ComplaintStates(StatesGroup):
    waiting_for_complaint_type = State()
    username = State()
    tg_id = State()
    chat_link = State()
    violation_link = State()
    channel_link = State()
    channel_violation = State()
    bot_username = State()
    group_link = State()
    group_id = State()
    group_violation = State()

class SupportStates(StatesGroup):
    waiting_for_question = State()

class AdminStates(StatesGroup):
    waiting_for_subscription_id = State()

class ScriptStates(StatesGroup):
    waiting_for_phone_number = State()
    waiting_for_username = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_key(length=16):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def check_ban_and_subscription(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in banned_users or (user_id not in ADMIN_IDS and user_id not in subscribed_users):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π! üîÑ")
        await state.clear()
        return False
    return True

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ –Ω–æ–º–µ—Ä—É
async def run_custom_script(user_id: int, callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback.message.edit_text("üìû **–ó–∞–ø—É—Å–∫ –ø—Ä–æ–±–∏–≤–∞...** –û–∂–∏–¥–∞–π! ‚è≥")
        hunter_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
        await hunter_client.start()
        logger.info(f"Telethon client started for user {user_id}")

        try:
            logger.info(f"Clearing chat history with {TARGET_BOT} for user {user_id}")
            await hunter_client(DeleteHistoryRequest(
                peer=TARGET_BOT,
                max_id=0,
                just_clear=True,
                revoke=True
            ))
        except Exception as e:
            logger.error(f"Error clearing chat history for user {user_id}: {e}")

        await hunter_client.send_message(TARGET_BOT, "start")
        logger.info(f"Sent 'start' to {TARGET_BOT} for user {user_id}")

        if await wait_for_specific_response(hunter_client, TARGET_BOT, "üîç –ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –∑–Ω–∞–µ—Ç–µ", timeout=15):
            await asyncio.sleep(1)
            await callback.message.edit_text(
                "üì± **–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**:\n–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX",
                reply_markup=main_keyboard
            )
            await state.update_data(hunter_client=hunter_client, callback_message=callback.message)
            await state.set_state(ScriptStates.waiting_for_phone_number)
            logger.info(f"Set state to waiting_for_phone_number for user {user_id}")
            return
        else:
            await callback.message.edit_text(
                f"‚ùå {TARGET_BOT} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîÑ",
                reply_markup=main_keyboard
            )
            logger.warning(f"No response from {TARGET_BOT} for user {user_id}")
            if hunter_client.is_connected():
                await hunter_client.disconnect()

    except FloodWaitError as e:
        logger.error(f"Flood wait error for user {user_id}: wait for {e.seconds} seconds")
        await callback.message.edit_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–∏ {e.seconds} —Å–µ–∫ –∏ –ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except SessionPasswordNeededError:
        logger.error(f"Two-factor authentication required for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù—É–∂–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ù–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! üõ†",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except PhoneCodeInvalidError:
        logger.error(f"Invalid authentication code for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except Exception as e:
        logger.error(f"Error interacting with {TARGET_BOT} for user {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! üõ†",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(ScriptStates.waiting_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    phone_number = message.text.strip()
    logger.info(f"Received phone number {phone_number} from user {user_id}")

    data = await state.get_data()
    hunter_client = data.get("hunter_client")
    if not hunter_client:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ! üîÑ", reply_markup=main_keyboard)
        await state.clear()
        return

    try:
        if not phone_number.startswith("+") or len(phone_number) < 12:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞! üîÑ")
            return

        if not hunter_client.is_connected():
            await message.answer("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ! üîÑ", reply_markup=main_keyboard)
            await state.clear()
            return

        await hunter_client.send_message(TARGET_BOT, phone_number)
        logger.info(f"Sent phone number {phone_number} to {TARGET_BOT} for user {user_id}")

        await message.answer("üì° **–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö...** ‚è≥")
        await asyncio.sleep(15)

        messages = await get_n_latest_bot_messages(hunter_client, TARGET_BOT, count=2)
        if messages and len(messages) >= 2:
            response = messages[0].message
            await message.answer(
                f"**üò∫ –û—Ç—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É**:\n\n{response}",
                reply_markup=main_keyboard,
                parse_mode="Markdown"
            )
            logger.info(f"Response from {TARGET_BOT} for user {user_id}: {response}")
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø—Ä–æ–±–∏–ª –Ω–æ–º–µ—Ä {phone_number}")
                except Exception as e:
                    logger.error(f"Error notifying admin {admin_id}: {e}")
        else:
            await message.answer(
                f"‚ùå {TARGET_BOT} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü—Ä–æ–≤–µ—Ä—å –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
                reply_markup=main_keyboard
            )
            logger.warning(f"No response from {TARGET_BOT} for user {user_id}")
    except Exception as e:
        logger.error(f"Error sending phone number for user {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ", reply_markup=main_keyboard)
    finally:
        if hunter_client.is_connected():
            await hunter_client.disconnect()
            logger.info(f"Telethon client disconnected for user {user_id}")
        await state.clear()

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ username
async def run_username_script(user_id: int, callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback.message.edit_text("üë§ **–ó–∞–ø—É—Å–∫ –ø—Ä–æ–±–∏–≤–∞ –ø–æ username...** –û–∂–∏–¥–∞–π! ‚è≥")
        hunter_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
        await hunter_client.start()
        logger.info(f"Telethon client started for user {user_id} for username lookup")

        try:
            logger.info(f"Clearing chat history with {TARGET_BOT} for user {user_id}")
            await hunter_client(DeleteHistoryRequest(
                peer=TARGET_BOT,
                max_id=0,
                just_clear=True,
                revoke=True
            ))
        except Exception as e:
            logger.error(f"Error clearing chat history for user {user_id}: {e}")

        await hunter_client.send_message(TARGET_BOT, "/start")
        logger.info(f"Sent '/start' to {TARGET_BOT} for user {user_id}")

        if await wait_for_specific_response(hunter_client, TARGET_BOT, "üîç –ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –∑–Ω–∞–µ—Ç–µ", timeout=15):
            await asyncio.sleep(1)
            await callback.message.edit_text(
                "üë§ **–í–≤–µ–¥–∏ username**:\n–§–æ—Ä–º–∞—Ç: @username",
                reply_markup=main_keyboard
            )
            await state.update_data(hunter_client=hunter_client, callback_message=callback.message)
            await state.set_state(ScriptStates.waiting_for_username)
            logger.info(f"Set state to waiting_for_username for user {user_id}")
            return
        else:
            await callback.message.edit_text(
                f"‚ùå {TARGET_BOT} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîÑ",
                reply_markup=main_keyboard
            )
            logger.warning(f"No response from {TARGET_BOT} for user {user_id}")
            if hunter_client.is_connected():
                await hunter_client.disconnect()

    except FloodWaitError as e:
        logger.error(f"Flood wait error for user {user_id}: wait for {e.seconds} seconds")
        await callback.message.edit_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–∏ {e.seconds} —Å–µ–∫ –∏ –ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except SessionPasswordNeededError:
        logger.error(f"Two-factor authentication required for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù—É–∂–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ù–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! üõ†",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except PhoneCodeInvalidError:
        logger.error(f"Invalid authentication code for user {user_id}")
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()
    except Exception as e:
        logger.error(f"Error interacting with {TARGET_BOT} for user {user_id}: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! üõ†",
            reply_markup=main_keyboard
        )
        if hunter_client.is_connected():
            await hunter_client.disconnect()

# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ username
async def find_and_click_button(client, bot_username, button_position=3, timeout=15):
    logger.info(f"Searching for button at position {button_position + 1}")
    start_time = time.time()
    while time.time() - start_time < timeout:
        history = await client(GetHistoryRequest(
            peer=bot_username,
            limit=1,
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        if history.messages:
            message = history.messages[0]
            if hasattr(message, 'reply_markup') and message.reply_markup:
                buttons = [button for row in message.reply_markup.rows for button in row.buttons]
                if len(buttons) > button_position:
                    target_button = buttons[button_position]
                    try:
                        if isinstance(target_button, KeyboardButtonUrl):
                            logger.info(f"URL button: {target_button.url}")
                            return True
                        elif isinstance(target_button, KeyboardButtonCallback):
                            logger.info(f"Sending callback query with data: {target_button.data}")
                            await client(GetBotCallbackAnswerRequest(
                                peer=bot_username,
                                msg_id=message.id,
                                data=target_button.data
                            ))
                            return True
                        else:
                            await message.click(button_position)
                            logger.info("Button clicked via click()")
                            return True
                    except Exception as e:
                        logger.error(f"Error clicking button: {e}")
                        return False
        await asyncio.sleep(1)
    logger.warning(f"Timeout: button at position {button_position + 1} not found")
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ username
@router.message(ScriptStates.waiting_for_username)
async def process_username_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.text.strip()
    logger.info(f"Received username {username} from user {user_id}")

    data = await state.get_data()
    hunter_client = data.get("hunter_client")
    if not hunter_client:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ! üîÑ", reply_markup=main_keyboard)
        await state.clear()
        return

    try:
        if not username.startswith("@"):
            await message.answer("‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞! üîÑ")
            return

        if not hunter_client.is_connected():
            await message.answer("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ! üîÑ", reply_markup=main_keyboard)
            await state.clear()
            return

        await hunter_client.send_message(TARGET_BOT, username)
        logger.info(f"Sent username {username} to {TARGET_BOT} for user {user_id}")

        if await find_and_click_button(hunter_client, TARGET_BOT, button_position=3, timeout=15):
            await asyncio.sleep(10)
            messages = await get_n_latest_bot_messages(hunter_client, TARGET_BOT, count=2)
            if messages and len(messages) >= 2:
                response = messages[0].message
                await message.answer(
                    f"**üò∫ –û—Ç—á–µ—Ç –ø–æ {username}**:\n\n{response}",
                    reply_markup=main_keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"Response from {TARGET_BOT} for user {user_id}: {response}")
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø—Ä–æ–±–∏–ª {username}")
                    except Exception as e:
                        logger.error(f"Error notifying admin {admin_id}: {e}")
            else:
                await message.answer(
                    f"‚ùå {TARGET_BOT} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü—Ä–æ–≤–µ—Ä—å –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ",
                    reply_markup=main_keyboard
                )
                logger.warning(f"No response from {TARGET_BOT} for user {user_id}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ", reply_markup=main_keyboard)
            logger.warning(f"Failed to click button for user {user_id}")

    except Exception as e:
        logger.error(f"Error processing username for user {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ", reply_markup=main_keyboard)
    finally:
        if hunter_client.is_connected():
            await hunter_client.disconnect()
            logger.info(f"Telethon client disconnected for user {user_id}")
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    all_users[user_id] = username
    logger.debug(f"Start command for user {user_id} (@{username})")
    try:
        await message.answer(
            "üî• **SN0S3R - –¢–≤–æ–π –£–¥–∞—Ä –ø–æ –¶–µ–ª—è–º** üî•\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–Ω–∏ –∞—Ç–∞–∫—É! üöÄ",
            reply_markup=main_keyboard
        )
        logger.info(f"Sent /start response to user {user_id} (@{username})")
    except Exception as e:
        logger.error(f"Error in /start for user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîÑ", reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /getid
@router.message(Command("getid"))
async def get_id_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    if user_id in ADMIN_IDS:
        try:
            target_username = message.text.split()[1].lstrip("@")
            for uid, uname in all_users.items():
                if uname.lower() == target_username.lower():
                    await message.answer(f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname}: {uid}")
                    return
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except IndexError:
            await message.answer(f"üÜî –¢–≤–æ–π ID: {user_id}\n–î–ª—è –ø–æ–∏—Å–∫–∞: /getid @username")
    else:
        await message.answer(f"üÜî –¢–≤–æ–π ID: {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /generatekey
@router.message(Command("generatekey"))
async def generate_key_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    try:
        days = int(message.text.split()[1])
        if days <= 0:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –¥–Ω–∏ > 0! üîÑ")
            return
        key = generate_key()
        keys[key] = {
            "days": days,
            "used": False,
            "user_id": None,
            "expires": None
        }
        await message.answer(f"üîë **–ö–ª—é—á —Å–æ–∑–¥–∞–Ω**:\n`{key}`\n–î–µ–π—Å—Ç–≤—É–µ—Ç: {days} –¥–Ω–µ–π")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /generatekey <days>")

# –ö–æ–º–∞–Ω–¥–∞ /activate
@router.message(Command("activate"))
async def activate_key_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    if user_id in banned_users:
        await message.answer("‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω! üö´")
        return
    try:
        key = message.text.split()[1]
        if key not in keys:
            await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ")
            return
        if keys[key]["used"]:
            await message.answer("‚ùå –ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! üîÑ")
            return
        days = keys[key]["days"]
        expires = datetime.now() + timedelta(days=days)
        keys[key]["used"] = True
        keys[key]["user_id"] = user_id
        keys[key]["expires"] = expires
        subscribed_users[user_id] = {
            "username": username,
            "expires": expires
        }
        await message.answer(
            f"üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!** üöÄ\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%Y-%m-%d %H:%M')}"
        )
        logger.info(f"User {user_id} (@{username}) activated key {key} for {days} days")
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id,
                                       f"üîî @{username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á `{key}` –Ω–∞ {days} –¥–Ω–µ–π")
            except Exception as e:
                logger.error(f"Error notifying admin {admin_id}: {e}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –∫–ª—é—á: /activate <key>")

# –ö–æ–º–∞–Ω–¥–∞ /listkeys
@router.message(Command("listkeys"))
async def list_keys_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    if not keys:
        await message.answer("üì≠ –ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    key_list = "\n".join(
        f"üîë `{key}`: {data['days']} –¥–Ω–µ–π, "
        f"{'‚úÖ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if data['used'] else '‚è≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}, "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id'] or '–Ω–µ—Ç'}, "
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {data['expires'].strftime('%Y-%m-%d %H:%M') if data['expires'] else '–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}"
        for key, data in keys.items()
    )
    await message.answer(f"üìã **–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π**:\n{key_list}")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@router.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.add(user_id)
        await message.answer(f"‚úÖ @{username} (ID: {user_id}) –∑–∞–±–∞–Ω–µ–Ω! üö´")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏ username: /ban @username")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@router.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        banned_users.discard(user_id)
        await message.answer(f"‚úÖ @{username} (ID: {user_id}) —Ä–∞–∑–±–∞–Ω–µ–Ω! ‚úÖ")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏ username: /unban @username")

# –ö–æ–º–∞–Ω–¥–∞ /users
@router.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    if not all_users:
        await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    user_list = "\n".join(
        f"üë§ @{username} (ID: {user_id})"
        f"{' üìÖ –¥–æ ' + subscribed_users[user_id]['expires'].strftime('%Y-%m-%d') if user_id in subscribed_users else ''}"
        f"{' üö´' if user_id in banned_users else ''}"
        for user_id, username in sorted(all_users.items(), key=lambda x: x[0])
    )
    await message.answer(
        f"üìã **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**:\n{user_list}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="issue_subscription")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
    )

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
@router.message(Command("subscribe"))
async def subscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")
            return
        username = parts[1].lstrip("@")
        days = int(parts[2])
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if days <= 0:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –¥–Ω–∏ > 0! üîÑ")
            return
        expires = datetime.now() + timedelta(days=days)
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": expires
        }
        await message.answer(f"‚úÖ @{username} (ID: {user_id}) –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {expires.strftime('%Y-%m-%d')}!")
        try:
            await bot.send_message(user_id, f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires.strftime('%Y-%m-%d')}! üöÄ")
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å @{username}.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /subscribe @username <days>")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
@router.message(Command("unsubscribe"))
async def unsubscribe_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    try:
        username = message.text.split()[1].lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if user_id not in subscribed_users:
            await message.answer(f"‚ùå –£ @{username} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        del subscribed_users[user_id]
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ @{username} (ID: {user_id}) —É–¥–∞–ª–µ–Ω–∞! üóë")
        try:
            await bot.send_message(user_id, "üóë –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å @{username}.")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏ username: /unsubscribe @username")

# –ö–æ–º–∞–Ω–¥–∞ /answer
@router.message(Command("answer"))
async def answer_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! üö´")
        return
    if not support_questions:
        await message.answer("üì≠ –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
        return
    for idx, q in enumerate(support_questions, 1):
        await message.answer(
            f"‚ùì –í–æ–ø—Ä–æ—Å #{idx} –æ—Ç @{q['username']} (ID: {q['user_id']}):\n{q['text']}"
        )
    await message.answer("üì¨ –û—Ç–≤–µ—Ç—å, —Ü–∏—Ç–∏—Ä—É—è –≤–æ–ø—Ä–æ—Å (—Å–≤–∞–π–ø).")

# –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "issue_subscription")
async def process_issue_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! üö´")
        return
    await state.set_state(AdminStates.waiting_for_subscription_id)
    await callback.message.answer("üë§ –í–≤–µ–¥–∏ @username –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    await callback.message.delete()

@router.message(AdminStates.waiting_for_subscription_id)
async def process_subscription_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! üö´")
        return
    try:
        username = message.text.lstrip("@")
        user_id = None
        for uid, uname in all_users.items():
            if uname.lower() == username.lower():
                user_id = uid
                break
        if not user_id:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        subscribed_users[user_id] = {
            "username": all_users[user_id],
            "expires": None
        }
        await message.answer(f"‚úÖ @{username} (ID: {user_id}) –ø–æ–ª—É—á–∏–ª –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É! üéâ")
        try:
            await bot.send_message(user_id, "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É! üöÄ")
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")
            await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å @{username}.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username! üîÑ")
    await state.clear()

# –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
@router.callback_query(lambda c: c.data.startswith("choice_"))
async def process_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å! üîÑ")
        return
    choice = callback.data
    if choice == "choice_snos":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç", callback_data="snos_1")],
            [InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", callback_data="snos_2")],
            [InlineKeyboardButton(text="ü§ñ –ë–æ—Ç", callback_data="snos_3")],
            [InlineKeyboardButton(text="üí¨ –ì—Ä—É–ø–ø–∞", callback_data="snos_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_back")]
        ])
        await callback.message.edit_text("‚öîÔ∏è **–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∞—Ç–∞–∫–∏**:\n–ö–æ–≥–æ –∏–ª–∏ —á—Ç–æ –±—É–¥–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å? üòé", reply_markup=keyboard)
    elif choice == "choice_support":
        await state.set_state(SupportStates.waiting_for_question)
        await callback.message.edit_text(
            "üì© **–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ**:\n–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —á–∞—Ç! üòä",
            reply_markup=main_keyboard
        )
    elif choice == "choice_script":
        await run_custom_script(callback.from_user.id, callback, state)
    elif choice == "choice_username":
        await run_username_script(callback.from_user.id, callback, state)
    elif choice == "choice_back":
        await callback.message.edit_text(
            "üî• **SN0S3R - –¢–≤–æ–π –£–¥–∞—Ä –ø–æ –¶–µ–ª—è–º** üî•\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–Ω–∏ –∞—Ç–∞–∫—É! üöÄ",
            reply_markup=main_keyboard
        )

# –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
@router.message(SupportStates.waiting_for_question)
async def process_support_question(message: Message, state: FSMContext):
    question = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    support_questions.append({"user_id": user_id, "username": username, "text": question})
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n{question}"
            )
        except Exception as e:
            logger.error(f"Error sending question to admin {admin_id}: {e}")
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º. üòé", reply_markup=main_keyboard)
    await state.clear()

# –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞
@router.message(lambda message: message.from_user.id in ADMIN_IDS and message.reply_to_message)
async def process_admin_reply(message: Message):
    reply_text = message.text
    replied_message = message.reply_to_message.text
    for question in support_questions:
        question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{question['username']} (ID: {question['user_id']}):\n{question['text']}"
        if question_text in replied_message:
            user_id = question['user_id']
            try:
                await bot.send_message(user_id, f"üì¨ **–û—Ç–≤–µ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏**:\n{reply_text}")
                await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
                support_questions.remove(question)
            except Exception as e:
                logger.error(f"Error sending reply to user {user_id}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (ID: {user_id}).")
            return
    await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å —Ü–∏—Ç–∞—Ç—É! üîÑ")

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–Ω–æ—Å–∞
@router.callback_query(lambda c: c.data.startswith("snos_"))
async def process_snos_choice(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å! üîÑ")
        return
    choice = callback.data.split("_")[1]
    await state.update_data(choice=choice)
    await state.set_state(ComplaintStates.waiting_for_complaint_type)
    if choice == "1":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –°–ø–∞–º", callback_data="comp_1")],
            [InlineKeyboardButton(text="üîç –î–æ–∫—Å–∏–Ω–≥", callback_data="comp_2")],
            [InlineKeyboardButton(text="üö® –ù–∞—Ä–∫–æ—Ç–∏–∫–∏/–¶–ü", callback_data="comp_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_snos")]
        ])
        await callback.message.edit_text("üéØ **–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç**:", reply_markup=keyboard)
    elif choice == "2":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="ch_1")],
            [InlineKeyboardButton(text="üê∂ –ñ–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ", callback_data="ch_2")],
            [InlineKeyboardButton(text="üö® –î–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ", callback_data="ch_3")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_snos")]
        ])
        await callback.message.edit_text("üéØ **–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞–Ω–∞–ª**:", reply_markup=keyboard)
    elif choice == "3":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ì–ª–∞–∑ –ë–æ–≥–∞", callback_data="bot_1")],
            [InlineKeyboardButton(text="üê≥ –°–∏–Ω–∏–π –∫–∏—Ç", callback_data="bot_2")],
            [InlineKeyboardButton(text="üö® –ü—Ä–æ–¥–∞–∂–∞ –¶–ü", callback_data="bot_3")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_snos")]
        ])
        await callback.message.edit_text("üéØ **–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –±–æ—Ç–∞**:", reply_markup=keyboard)
    elif choice == "4":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –°–ø–∞–º", callback_data="group_1")],
            [InlineKeyboardButton(text="‚öî –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Å–∏–ª–∏—è", callback_data="group_2")],
            [InlineKeyboardButton(text="üö® –î–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ", callback_data="group_3")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="choice_snos")]
        ])
        await callback.message.edit_text("üéØ **–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –≥—Ä—É–ø–ø—É**:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
@router.callback_query(lambda c: c.data.startswith(("comp_", "ch_", "bot_", "group_")))
async def process_complaint_type(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in banned_users or \
            (callback.from_user.id not in ADMIN_IDS and callback.from_user.id not in subscribed_users):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å! üîÑ")
        return
    complaint_type = callback.data.split("_")[0]
    complaint_id = callback.data.split("_")[1]
    await state.update_data(complaint_type=complaint_type, complaint_id=complaint_id)
    data = await state.get_data()
    choice = data.get("choice")
    if choice == "1":
        await state.set_state(ComplaintStates.username)
        await callback.message.edit_text("üë§ –í–≤–µ–¥–∏ USERNAME –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "2":
        await state.set_state(ComplaintStates.channel_link)
        await callback.message.edit_text("üì¢ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=main_keyboard)
    elif choice == "3":
        await state.set_state(ComplaintStates.bot_username)
        await callback.message.edit_text("ü§ñ –í–≤–µ–¥–∏ USERNAME –±–æ—Ç–∞:", reply_markup=main_keyboard)
    elif choice == "4":
        await state.set_state(ComplaintStates.group_link)
        await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ username –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.username)
async def process_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(username=message.text)
    await state.set_state(ComplaintStates.tg_id)
    await message.answer("üÜî –í–≤–µ–¥–∏ TG ID –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TG ID –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(ComplaintStates.tg_id)
async def process_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(tg_id=message.text)
    await state.set_state(ComplaintStates.chat_link)
    await message.answer("üí¨ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
@router.message(ComplaintStates.chat_link)
async def process_chat_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(chat_link=message.text)
    await state.set_state(ComplaintStates.violation_link)
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
@router.message(ComplaintStates.violation_link)
async def process_violation_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(violation_link=message.text)
    data = await state.get_data()
    username = data.get("username")
    tg_id = data.get("tg_id")
    chat_link = data.get("chat_link")
    violation_link = data.get("violation_link")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!** üí•\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/2500\n‚è≥ –ñ–¥–µ–º...")
    await state.clear()
    comp_texts = {
        "1": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}.",
        "2": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}.",
        "4": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {tg_id}) —Å–≤—è–∑–∞–Ω —Å –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏/–¶–ü! –ß–∞—Ç: {chat_link}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {violation_link}."
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(
                username=username.strip(),
                tg_id=tg_id.strip(),
                chat_link=chat_link.strip(),
                violation_link=violation_link.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç', comp_body)
            if success:
                sent_emails += 1
            percentage = (sent_emails / total_emails) * 100
            await progress_message.edit_text(
                f"üöÄ **–ê—Ç–∞–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!** üí•\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sent_emails}/{total_emails} ({percentage:.1f}%)\n"
                f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
            )
            await asyncio.sleep(1.5)
    await progress_message.edit_text(
        f"üèÜ **–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_emails}/{total_emails} –∂–∞–ª–æ–±\n"
        f"–¶–µ–ª—å –ø–æ–¥ —É–¥–∞—Ä–æ–º! üòé",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.message(ComplaintStates.channel_link)
async def process_channel_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_link=message.text)
    await state.set_state(ComplaintStates.channel_violation)
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
@router.message(ComplaintStates.channel_violation)
async def process_channel_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(channel_violation=message.text)
    data = await state.get_data()
    channel_link = data.get("channel_link")
    channel_violation = data.get("channel_violation")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!** üí•\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/2500\n‚è≥ –ñ–¥–µ–º...")
    await state.clear()
    comp_texts = {
        "1": f"–ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}.",
        "2": f"–ö–∞–Ω–∞–ª {channel_link} —Å–æ–¥–µ—Ä–∂–∏—Ç –∂–∏–≤–æ–¥–µ—Ä—Å—Ç–≤–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}.",
        "3": f"–ö–∞–Ω–∞–ª {channel_link} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {channel_violation}."
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(
                channel_link=channel_link.strip(),
                channel_violation=channel_violation.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–∞–Ω–∞–ª', comp_body)
            if success:
                sent_emails += 1
            percentage = (sent_emails / total_emails) * 100
            await progress_message.edit_text(
                f"üöÄ **–ê—Ç–∞–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!** üí•\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sent_emails}/{total_emails} ({percentage:.1f}%)\n"
                f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
            )
            await asyncio.sleep(1.5)
    await progress_message.edit_text(
        f"üèÜ **–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_emails}/{total_emails} –∂–∞–ª–æ–±\n"
        f"–¶–µ–ª—å –ø–æ–¥ —É–¥–∞—Ä–æ–º! üòé",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ username –±–æ—Ç–∞
@router.message(ComplaintStates.bot_username)
async def process_bot_username(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(bot_username=message.text)
    data = await state.get_data()
    bot_username = data.get("bot_username")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!** üí•\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/2500\n‚è≥ –ñ–¥–µ–º...")
    await state.clear()
    comp_texts = {
        "1": f"–ë–æ—Ç {bot_username} –∏–º–∏—Ç–∏—Ä—É–µ—Ç '–ì–ª–∞–∑ –ë–æ–≥–∞'! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.",
        "2": f"–ë–æ—Ç {bot_username} —Å–≤—è–∑–∞–Ω —Å '–°–∏–Ω–∏–º –∫–∏—Ç–æ–º'! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.",
        "3": f"–ë–æ—Ç {bot_username} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(bot_username=bot_username.strip())
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –±–æ—Ç–∞', comp_body)
            if success:
                sent_emails += 1
            percentage = (sent_emails / total_emails) * 100
            await progress_message.edit_text(
                f"üöÄ **–ê—Ç–∞–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!** üí•\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sent_emails}/{total_emails} ({percentage:.1f}%)\n"
                f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
            )
            await asyncio.sleep(1.5)
    await progress_message.edit_text(
        f"üèÜ **–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_emails}/{total_emails} –∂–∞–ª–æ–±\n"
        f"–¶–µ–ª—å –ø–æ–¥ —É–¥–∞—Ä–æ–º! üòé",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
@router.message(ComplaintStates.group_link)
async def process_group_link(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_link=message.text)
    await state.set_state(ComplaintStates.group_id)
    await message.answer("üÜî –í–≤–µ–¥–∏ ID –≥—Ä—É–ø–ø—ã:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID –≥—Ä—É–ø–ø—ã
@router.message(ComplaintStates.group_id)
async def process_group_id(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_id=message.text)
    await state.set_state(ComplaintStates.group_violation)
    await message.answer("‚ö† –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
@router.message(ComplaintStates.group_violation)
async def process_group_violation(message: Message, state: FSMContext):
    if not await check_ban_and_subscription(message, state):
        return
    await state.update_data(group_violation=message.text)
    data = await state.get_data()
    group_link = data.get("group_link")
    group_id = data.get("group_id")
    group_violation = data.get("group_violation")
    comp_id = data.get("complaint_id")
    if not senders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±! üòî")
        await state.clear()
        return
    progress_message = await message.answer("üöÄ **–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!** üí•\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/2500\n‚è≥ –ñ–¥–µ–º...")
    await state.clear()
    comp_texts = {
        "1": f"–ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}.",
        "2": f"–ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç –Ω–∞—Å–∏–ª–∏–µ! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}.",
        "3": f"–ì—Ä—É–ø–ø–∞ {group_link} (ID: {group_id}) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¶–ü! –ù–∞—Ä—É—à–µ–Ω–∏–µ: {group_violation}."
    }
    sent_emails = 0
    total_emails = len(senders) * len(receivers)
    for sender_email, sender_password in senders.items():
        for receiver in receivers:
            comp_text = comp_texts.get(comp_id, comp_texts["1"])
            comp_body = comp_text.format(
                group_link=group_link.strip(),
                group_id=group_id.strip(),
                group_violation=group_violation.strip()
            )
            success = await send_email(receiver, sender_email, sender_password, '‚ö† –ñ–∞–ª–æ–±–∞ –Ω–∞ –≥—Ä—É–ø–ø—É', comp_body)
            if success:
                sent_emails += 1
            percentage = (sent_emails / total_emails) * 100
            await progress_message.edit_text(
                f"üöÄ **–ê—Ç–∞–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!** üí•\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sent_emails}/{total_emails} ({percentage:.1f}%)\n"
                f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
            )
            await asyncio.sleep(1.5)
    await progress_message.edit_text(
        f"üèÜ **–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_emails}/{total_emails} –∂–∞–ª–æ–±\n"
        f"–¶–µ–ª—å –ø–æ–¥ —É–¥–∞—Ä–æ–º! üòé",
        reply_markup=main_keyboard
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await reset_updates()
    await set_bot_commands()
    dp.startup.register(lambda: logger.info("Bot started"))
    dp.shutdown.register(lambda: logger.info("Bot stopped"))
    asyncio.create_task(check_subscriptions())
    asyncio.create_task(clean_expired_keys())
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except TelegramConflictError:
        logger.error("Bot is already running elsewhere. Stopping.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
